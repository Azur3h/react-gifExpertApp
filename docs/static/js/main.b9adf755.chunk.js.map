{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","_ref","setCategories","_useState","useState","_useState2","_slicedToArray","inputValue","setInputValue","React","createElement","onSubmit","e","preventDefault","trim","length","cats","concat","_toConsumableArray","type","value","onChange","target","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","getGifs","_asyncToGenerator","_callee","category","url","resp","_yield$resp$json","data","gifs","_context","encodeURI","fetch","json","map","img","_img$images","id","title","images","downsized_medium","_x","apply","arguments","GifGridItem","className","src","alt","GifGrid","_useFetchGifs","loading","setState","useEffect","imgs","useFetchGifs","console","log","Fragment","assign","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b9adf755.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useState } from 'react';\r\nimport Proptypes from 'prop-types'\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    };\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n//        console.log(\"submit hecho\");\r\n\r\n        if ( inputValue.trim().length > 0 ) {\r\n            setCategories( (cats) => [inputValue, ...cats]);\r\n            setInputValue(\"\");\r\n        };\r\n\r\n        \r\n    }\r\n\r\n    return (\r\n    <form onSubmit= { handleSubmit }>\r\n      <input \r\n        type= \"text\"\r\n        value= { inputValue }\r\n        onChange= { handleInputChange }\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: Proptypes.func.isRequired\r\n}","\r\n\r\n\r\nexport const getGifs = async( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=5Yu7DywX9jUnxXTvGQ7CApB99ywdBo5E`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n        }\r\n    } );\r\n\r\n    return gifs;\r\n};","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n\r\n//  console.log ( id, title, url );\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <img src={ url }\r\n           alt={ title } />\r\n      <p> { title } </p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n//import { getGifs } from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n//    const [images, setImages] = useState([]);\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    console.log( loading );\r\n\r\n//    useEffect( () => {\r\n//        getGifs( category )\r\n////            .then( imgs => setImages( imgs ) ) //o lo que es lo mismo\r\n//            .then( setImages );\r\n//    }, [ category ]\r\n//    )\r\n\r\n    /*\r\n    const getGifs = async() => {\r\n\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=5Yu7DywX9jUnxXTvGQ7CApB99ywdBo5E`;\r\n        const resp = await fetch( url );\r\n        const { data } = await resp.json();\r\n\r\n        const gifs = data.map( img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url,\r\n            }\r\n        } );\r\n\r\n        console.log(gifs);\r\n        setImages(gifs);\r\n    };\r\n    */\r\n\r\n    return (\r\n /*   <>\r\n        <h3> { category } </h3>\r\n        <ol>\r\n            {\r\n                images.map( ( img ) => (\r\n                    <li key ={ img.id }> { img.title } </li>\r\n                ))\r\n            }\r\n        </ol>\r\n    </>\r\n*/\r\n    <>\r\n        <h3 className=\"animate__animated animate__fadeIn animate__slower\"> { category } </h3>\r\n\r\n        { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n\r\n        <div className=\"card-grid animate__animated animate__fadeIn animate__slower\">\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            key={ img.id }\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n    </>\r\n    )\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n\r\n    }, [ category ] )\r\n\r\n\r\n    return state; // {data: [], loading: true}\r\n\r\n}","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n//    const categories = [\"One Punch Man\", \"Rurouni Kenshin\", \"Full Metal Alchemist Broterhood\"];\r\n    const [categories, setCategories] = useState([\"One Punch Man\"/*, \"Rurouni Kenshin\", \"Full Metal Alchemist Broterhood\"*/]);\r\n\r\n//    const handleAdd = () => {\r\n//        setCategories( [...categories, \"Hunter X Hunter\"] );\r\n//        setCategories( (cats) => [...cats, \"Hunter X Hunter\"]);\r\n//   };\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories= { setCategories }/>\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n//                        return \r\n//                        <li key = { category } > { category } </li>;\r\n                        <GifGrid\r\n                            key ={ category }\r\n                            category ={ category }\r\n                        />\r\n                     ))\r\n                }\r\n            </ol>\r\n\r\n\r\n        </>\r\n    )\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById( \"root\" )\n);\n\n"],"sourceRoot":""}